{"version":3,"sources":["search/KeywordInput.js","search/LocationSelector.js","search/ResultCard.js","search/Results.js","search/Search.js","App.js","serviceWorker.js","index.js"],"names":["KeywordInput","keywords","handleChange","inputField","createRef","removeWord","index","keywordsCopy","splice","className","map","word","i","key","type","onClick","onKeyUp","e","keyword","target","value","toLowerCase","includes","current","length","ref","placeholder","LocationSelector","locations","setSelected","useState","listOpen","setListOpen","header","setHeader","useEffect","setTimeout","window","addEventListener","closeList","removeEventListener","name","size","item","id","title","ResultCard","distance","Results","results","result","Search","updateKeywords","selected","updateSelected","updateResults","buildQueryURLFromState","currKeywords","currSelected","baseURL","location","keywordsString","toString","replace","locString","queryAPI","a","queryURL","fetch","method","response","console","log","json","data","App","Component","Home","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6ec56277.chunk.js","sourcesContent":["import React, { createRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Implements a text input box that displays entered phrases on the left side of the box.\r\n * Reference: https://medium.com/@jerrylowm/build-a-tags-input-react-component-from-scratch-1524f02acb9a\r\n */\r\nconst KeywordInput = ({ keywords, handleChange }) => {\r\n  let inputField = createRef();\r\n\r\n  const inputEnter = e => {\r\n    const keyword = e.target.value.toLowerCase();\r\n    if (e.key === 'Enter' && keyword) {\r\n      if (!keywords.includes(keyword)) {\r\n        handleChange([...keywords, keyword]);\r\n        inputField.current.value = '';\r\n      }\r\n    }\r\n    else if (e.key === 'Backspace' && !keyword) {\r\n      removeWord(keywords.length - 1);\r\n    }\r\n  }\r\n\r\n  const removeWord = index => {\r\n    const keywordsCopy = [...keywords];\r\n    keywordsCopy.splice(index, 1);\r\n    handleChange(keywordsCopy);\r\n  }\r\n\r\n  // console.log(this.props);\r\n  return (\r\n    <div className='tag-input'>\r\n      <ul className='tag-list'>\r\n        {keywords.map((word, i) => {\r\n          return (\r\n            <li key={word}>\r\n              {word}\r\n              <button type='button' onClick={() => { removeWord(i) }}>x</button>\r\n            </li>\r\n          );\r\n        })}\r\n        <li className='tag-input-field'>\r\n          <input type='text'\r\n            onKeyUp={inputEnter}\r\n            ref={inputField}\r\n            placeholder={keywords.length ? '' : 'Enter some keywords...'}>\r\n          </input>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nKeywordInput.propTypes = {\r\n  keywords: PropTypes.arrayOf(PropTypes.string).isRequired,\r\n  handleChange: PropTypes.func.isRequired\r\n}\r\n\r\nexport default KeywordInput;\r\n","import React, { useState, useEffect } from 'react';\r\nimport FontAwesome from 'react-fontawesome';\r\nimport '../index.css';\r\n\r\n/**\r\n * Implements a dropdown menu that selects locations. Uses a hook to\r\n * update the state in Search.js to reflect this selection.\r\n * Loosely based off this: https://blog.logrocket.com/building-a-custom-dropdown-menu-component-for-react-e94f02ced4a1/\r\n */\r\nconst LocationSelector = ({ locations, setSelected }) => {\r\n    const [listOpen, setListOpen] = useState(false);\r\n    const [header, setHeader] = useState(\"Choose Location...\");\r\n    /**\r\n     * Clicking outside dropdown calls closeList\r\n     */\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (listOpen) {\r\n                window.addEventListener('click', closeList)\r\n            }\r\n            else {\r\n                window.removeEventListener('click', closeList)\r\n            }\r\n        }, 0);\r\n        /**\r\n         * No memory leaks here!\r\n         */\r\n        return function cleanup() {\r\n            window.removeEventListener('click', closeList)\r\n        }\r\n    });\r\n\r\n    const closeList = () => {\r\n        setListOpen(false);\r\n    };\r\n\r\n    const toggleList = () => {\r\n        setListOpen(!listOpen);\r\n    };\r\n\r\n    const handleSelect = (id) => {\r\n        setSelected(id);\r\n        closeList();\r\n        setHeader(locations[id].title);\r\n    };\r\n\r\n    return (\r\n        <div className=\"dd-wrapper\">\r\n            <div className=\"dd-header\" onClick={() => toggleList()}>\r\n                <div className=\"dd-header-title\">{header}</div>\r\n                {listOpen\r\n                    ? <FontAwesome name=\"angle-up\" size=\"2x\" />\r\n                    : <FontAwesome name=\"angle-down\" size=\"2x\" />\r\n                }\r\n            </div>\r\n            {listOpen && <ul className=\"dd-list\">\r\n                {\r\n                    locations.map((item) => (\r\n                        <li key={item.id} className=\"dd-list-item\" onClick={() => handleSelect(item.id)}>{item.title}</li>\r\n                    ))\r\n                }\r\n            </ul>}\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default LocationSelector;","import React from 'react';\r\n\r\nconst ResultCard = ({ name, distance }) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <div className=\"row\">\r\n                    <div className=\"card-title\">\r\n                        <h5 className=\"card-title mb-0\">{name}</h5>\r\n                    </div>\r\n                    <div className=\"score\">\r\n                        distance: {distance}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResultCard;\r\n","import React from 'react';\r\nimport ResultCard from './ResultCard';\r\n\r\nconst Results = ({ results }) => {\r\n    return (\r\n        <div className=\"results-container\">\r\n            {results && results.map(\r\n                (result) => (\r\n                    <ResultCard\r\n                        name={result.name}\r\n                        distance={result.distance}\r\n                    />\r\n                ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results;","import React, { useState } from 'react';\r\nimport KeywordInput from './KeywordInput';\r\nimport LocationSelector from './LocationSelector';\r\nimport Results from './Results';\r\n\r\nconst Search = () => {\r\n  const [keywords, updateKeywords] = useState([]);\r\n  const [selected, updateSelected] = useState(-1);\r\n  const locations = [\r\n    {\r\n      id: 0,\r\n      title: 'New York',\r\n    },\r\n    {\r\n      id: 1,\r\n      title: 'Dublin',\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'California',\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'Istanbul',\r\n    },\r\n    {\r\n      id: 4,\r\n      title: 'Izmir',\r\n    },\r\n    {\r\n      id: 5,\r\n      title: 'Oslo',\r\n    }\r\n  ];\r\n  const [results, updateResults] = useState([]);\r\n\r\n  const buildQueryURLFromState = (currKeywords, currSelected) => {\r\n    let baseURL = `${window.location}search`;\r\n    let keywordsString = currKeywords.toString().replace(/ /g, '%20');\r\n    let locString = `${currSelected}`;\r\n    baseURL += `${(currKeywords ? '?keywords=' + keywordsString : '')}`;\r\n    if (currSelected >= 0)\r\n      baseURL += `${(currKeywords ? '&' : '?')}zip=${locString}`;\r\n\r\n    return baseURL;\r\n  };\r\n\r\n  const queryAPI = async () => {\r\n    if (keywords.length > 0 || selected >= 0) {\r\n      const queryURL = buildQueryURLFromState(keywords, selected);\r\n      // const queryURL = `${window.location}search`;\r\n      let response = await (fetch(queryURL, { method: 'GET' }));\r\n      console.log(response);\r\n      let json = await (response.json());\r\n      console.log(json);\r\n      updateResults(json.data.results);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className='keyword-search'>\r\n        <KeywordInput keywords={keywords} handleChange={updateKeywords} />\r\n      </div>\r\n      <div className='location-selector'>\r\n        <LocationSelector\r\n          locations={locations}\r\n          selected={selected}\r\n          setSelected={updateSelected}\r\n        />\r\n      </div>\r\n      <button onClick={queryAPI}>Search!</button>\r\n      <div className='results'>\r\n        <Results\r\n          results={results}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { Component, Fragment } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport Search from './search/Search';\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      // <Router>\r\n      //   <nav>\r\n      //     <ul>\r\n      //       <li>\r\n      //         <Link to=\"/\">Home</Link>\r\n      //       </li>\r\n      //       <li>\r\n      //         <Link to=\"/about\">About</Link>\r\n      //       </li>\r\n      //     </ul>\r\n      //   </nav>\r\n\r\n      //   {/* A <Switch> looks through its children <Route>s and\r\n      //       renders the first one that matches the current URL. */}\r\n      //   <Switch>\r\n      //     <Route path=\"/about\">\r\n      //       <About />\r\n      //     </Route>\r\n      //     <Route path=\"/\">\r\n      //       <Home />\r\n      //     </Route>\r\n      //   </Switch>\r\n      // </Router>\r\n      <Home />\r\n    );\r\n  }\r\n}\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <h2>Restaurant Match</h2>\r\n        <Search></Search>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <div id='about-placeholder'></div>\r\n    )\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}