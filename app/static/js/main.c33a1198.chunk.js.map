{"version":3,"sources":["search/KeywordInput.js","search/LocationSelector.js","search/ResultCard.js","search/Results.js","search/Search.js","App.js","serviceWorker.js","index.js"],"names":["KeywordInput","keywords","handleChange","inputField","createRef","removeWord","index","keywordsCopy","splice","className","map","word","i","key","type","onClick","onKeyUp","e","keyword","target","value","toLowerCase","includes","current","length","ref","placeholder","LocationSelector","locations","setSelected","useState","listOpen","setListOpen","header","setHeader","useEffect","setTimeout","window","addEventListener","closeList","removeEventListener","name","size","item","id","title","ResultCard","distance","Results","results","result","Search","updateKeywords","selected","updateSelected","updateResults","buildQueryURLFromState","currKeywords","currSelected","baseURL","location","keywordsString","toString","replace","locString","queryAPI","a","queryURL","fetch","method","response","console","log","json","parsed","JSON","parse","data","App","to","path","Component","Home","About","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c33a1198.chunk.js","sourcesContent":["import React, { createRef } from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Implements a text input box that displays entered phrases on the left side of the box.\n * Reference: https://medium.com/@jerrylowm/build-a-tags-input-react-component-from-scratch-1524f02acb9a\n */\nconst KeywordInput = ({ keywords, handleChange }) => {\n  let inputField = createRef();\n\n  const inputEnter = e => {\n    const keyword = e.target.value.toLowerCase();\n    if (e.key === 'Enter' && keyword) {\n      if (!keywords.includes(keyword)) {\n        handleChange([...keywords, keyword]);\n        inputField.current.value = '';\n      }\n    }\n    else if (e.key === 'Backspace' && !keyword) {\n      removeWord(keywords.length - 1);\n    }\n  }\n\n  const removeWord = index => {\n    const keywordsCopy = [...keywords];\n    keywordsCopy.splice(index, 1);\n    handleChange(keywordsCopy);\n  }\n\n  // console.log(this.props);\n  return (\n    <div className='tag-input'>\n      <ul className='tag-list'>\n        {keywords.map((word, i) => {\n          return (\n            <li key={word}>\n              {word}\n              <button type='button' onClick={() => { removeWord(i) }}>x</button>\n            </li>\n          );\n        })}\n        <li className='tag-input-field'>\n          <input type='text'\n            onKeyUp={inputEnter}\n            ref={inputField}\n            placeholder={keywords.length ? '' : 'Enter some keywords...'}>\n          </input>\n        </li>\n      </ul>\n    </div>\n  );\n}\n\nKeywordInput.propTypes = {\n  keywords: PropTypes.arrayOf(PropTypes.string).isRequired,\n  handleChange: PropTypes.func.isRequired\n}\n\nexport default KeywordInput;\n","import React, { useState, useEffect } from 'react';\nimport FontAwesome from 'react-fontawesome';\nimport '../index.css';\n\n/**\n * Implements a dropdown menu that selects locations. Uses a hook to\n * update the state in Search.js to reflect this selection.\n * Loosely based off this: https://blog.logrocket.com/building-a-custom-dropdown-menu-component-for-react-e94f02ced4a1/\n */\nconst LocationSelector = ({ locations, setSelected }) => {\n    const [listOpen, setListOpen] = useState(false);\n    const [header, setHeader] = useState(\"Choose Location...\");\n    /**\n     * Clicking outside dropdown calls closeList\n     */\n    useEffect(() => {\n        setTimeout(() => {\n\n            if (listOpen) {\n                window.addEventListener('click', closeList)\n            }\n            else {\n                window.removeEventListener('click', closeList)\n            }\n        }, 0);\n        /**\n         * No memory leaks here!\n         */\n        return function cleanup() {\n            window.removeEventListener('click', closeList)\n        }\n    });\n\n    const closeList = () => {\n        setListOpen(false);\n    };\n\n    const toggleList = () => {\n        setListOpen(!listOpen);\n    };\n\n    const handleSelect = (id) => {\n        setSelected(id);\n        closeList();\n        setHeader(locations[id].title);\n    };\n\n\n    return (\n        <div className=\"dd-wrapper\">\n            <div className=\"dd-header\" onClick={() => toggleList()}>\n                <div className=\"dd-header-title\">{header}</div>\n                {listOpen\n                    ? <FontAwesome name=\"angle-up\" size=\"2x\" />\n                    : <FontAwesome name=\"angle-down\" size=\"2x\" />\n                }\n            </div>\n            {listOpen && <ul className=\"dd-list\">\n                {\n                    locations.map((item) => (\n                        <li key={item.id} className=\"dd-list-item\" onClick={() => handleSelect(item.id)}>{item.title}</li>\n                    ))\n                }\n            </ul>}\n        </div >\n    )\n}\n\nexport default LocationSelector;","import React from 'react';\n\nconst ResultCard = ({ name, distance }) => {\n    return (\n        <div className=\"card\">\n            <div className=\"card-body\">\n                <div className=\"row\">\n                    <div className=\"card-title\">\n                        <h5 className=\"card-title mb-0\">{name}</h5>\n                    </div>\n                    <div className=\"score\">\n                        score: {distance}\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default ResultCard;","import React from 'react';\nimport ResultCard from './ResultCard';\n\nconst Results = ({ results }) => {\n    return (\n        <div className=\"results-container\">\n            {results && results.map(\n                (result) => (\n                    <ResultCard\n                        name={result.name}\n                        distance={result.distance}\n                    />\n                ))}\n        </div>\n    );\n}\n\nexport default Results;","import React, { useState } from 'react';\nimport KeywordInput from './KeywordInput';\nimport LocationSelector from './LocationSelector';\nimport Results from './Results';\n\nconst Search = () => {\n  const [keywords, updateKeywords] = useState([]);\n  const [selected, updateSelected] = useState(-1);\n  const locations = [\n    {\n      id: 0,\n      title: 'New York',\n    },\n    {\n      id: 1,\n      title: 'Dublin',\n    },\n    {\n      id: 2,\n      title: 'California',\n    },\n    {\n      id: 3,\n      title: 'Istanbul',\n    },\n    {\n      id: 4,\n      title: 'Izmir',\n    },\n    {\n      id: 5,\n      title: 'Oslo',\n    }\n  ];\n  const [results, updateResults] = useState([{\n    name: \"mcdonalds\",\n    distance: 1\n  }]);\n\n  const buildQueryURLFromState = (currKeywords, currSelected) => {\n    let baseURL = `${window.location}search`;\n    let keywordsString = currKeywords.toString().replace(/ /g, '%20');\n    let locString = `${currSelected}`;\n    baseURL += `${(currKeywords ? '?keywords=' + keywordsString : '')}`;\n    if (currSelected >= 0)\n      baseURL += `${(currKeywords ? '&' : '?')}zip=${locString}`;\n\n    return baseURL;\n  };\n\n  const queryAPI = async () => {\n    const queryURL = buildQueryURLFromState(keywords, selected);\n    // const queryURL = `${window.location}search`;\n    let response = await (fetch(queryURL, { method: 'GET' }));\n    console.log(response);\n    let json = await (response.json());\n    console.log(json);\n    var parsed = JSON.parse(json);\n    updateResults(parsed.data.results);\n  };\n\n  return (\n    <div>\n      <div className='keyword-search'>\n        <KeywordInput keywords={keywords} handleChange={updateKeywords} />\n      </div>\n      <div className='location-selector'>\n        <LocationSelector\n          locations={locations}\n          selected={selected}\n          setSelected={updateSelected}\n        />\n      </div>\n      <button onClick={queryAPI}>Search!</button>\n      <div className='results'>\n        <Results\n          results={results}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Search;\n","import React, { Component, Fragment } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Search from './search/Search';\nimport './App.css';\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Router>\n        <nav>\n          <ul>\n            <li>\n              <Link to=\"/\">Home</Link>\n            </li>\n            <li>\n              <Link to=\"/about\">About</Link>\n            </li>\n          </ul>\n        </nav>\n\n        {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n        <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nclass Home extends Component {\n  render() {\n    return (\n\n      <Fragment>\n        <h3>Home!</h3>\n        <Search></Search>\n      </Fragment>\n    );\n  }\n}\n\nclass About extends Component {\n  render() {\n    return (\n      <div id='about-placeholder'></div>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}